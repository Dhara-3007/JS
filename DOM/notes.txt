document.getElementById("title")
<h1 id=​"title" class=​"heading">​DOM Learning​</h1>​

document.getElementById("title").id
'title'

document.getElementById("title").className
'heading'

document.getElementById("title").class
undefined

document.getElementById("title").getAttribute
ƒ getAttribute() { [native code] }

document.getElementById("title").getAttribute('id')
'title'

document.getElementById("title").setAttribute('class','test')
undefined

document.getElementById("title")
<h1 id=​"title" class=​"test">​DOM Learning​</h1>​
const title = document.getElementById("title")
undefined

title
<h1 id=​"title" class=​"test">​DOM Learning​</h1>​
title.style.backgroundColor="pink"
'pink'

title.style.padding="20px"
'20px'

title.style.borderRadius="8px"
'8px'

title
<h1 id=​"title" class=​"heading">​DOM Learning​</h1>​

title.textContent
'DOM Learning'

title.innerHTML
'DOM Learning'

title.innerText
'DOM Learning'

title.innerText
'DOM Learning'

title.textContent
'DOM Learning Span text'

title.innerHTML
'DOM Learning <span style="display:none;">Span text</span>'

document.querySelector('input[type="password"]')
<input type=​"password" < div>​

document.querySelector('.heading')
<h1 id=​"title" class=​"heading">​…​</h1>​

document.querySelector('#title')
<h1 id=​"title" class=​"heading">​…​</h1>​

document.querySelector('h2')
<h2>​HEading 2​</h2>​

document.querySelector('ul')
<ul>​<li>​…​</li>​<li>​…​</li>​<li>​…​</li>​</ul>​

const myul=document.querySelector('ul')
undefined

myul.querySelector('li')
<li>​::marker​"one"</li>​

const turnGreen = myul.querySelector('li')
undefined

turnGreen.style.backgroundColor="green"
'green'

turnGreen.innerText
'one'

turnGreen.innerText="five"
'five'

const templi = document.querySelectorAll('li')
undefined

templi
NodeList(3) [li, li, li]

templi[1].style.color='green'
'green'

templi[2].style.color='yellow'
'yellow'

const myh1 = document.querySelectorAll('h1')
undefined

myh1
NodeList(2) [h1#title.heading, h1]

myh1[0].style.color="pink"
'pink'

templi
NodeList(3) [li, li, li]

templi.forEach(function(l){
    l.style.backgroundColor='red'
})

document.getElementsByClassName('list-item')
HTMLCollection []length: 0[[Prototype]]: HTMLCollectionitem: ƒ item()length: (...)namedItem: ƒ namedItem()constructor: ƒ HTMLCollection()Symbol(Symbol.iterator): ƒ values()Symbol(Symbol.toStringTag): "HTMLCollection"get length: ƒ length()[[Prototype]]: Objectconstructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()__proto__: (...)get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()

const tempClass = document.getElementsByClassName('list-item')
undefined

tempClass
HTMLCollection []

Array.from(tempClass)
[]length: 0[[Prototype]]: Array(0)at: ƒ at()concat: ƒ concat()constructor: ƒ Array()copyWithin: ƒ copyWithin()entries: ƒ entries()every: ƒ every()fill: ƒ fill()filter: ƒ filter()find: ƒ find()findIndex: ƒ findIndex()findLast: ƒ findLast()findLastIndex: ƒ findLastIndex()flat: ƒ flat()flatMap: ƒ flatMap()forEach: ƒ forEach()includes: ƒ includes()indexOf: ƒ indexOf()join: ƒ join()keys: ƒ keys()lastIndexOf: ƒ lastIndexOf()length: 0map: ƒ map()pop: ƒ pop()push: ƒ push()reduce: ƒ reduce()reduceRight: ƒ reduceRight()reverse: ƒ reverse()shift: ƒ shift()slice: ƒ slice()some: ƒ some()sort: ƒ sort()splice: ƒ splice()toLocaleString: ƒ toLocaleString()toReversed: ƒ toReversed()toSorted: ƒ toSorted()toSpliced: ƒ toSpliced()toString: ƒ toString()unshift: ƒ unshift()values: ƒ values()with: ƒ with()Symbol(Symbol.iterator): ƒ values()Symbol(Symbol.unscopables): {at: true, copyWithin: true, entries: true, fill: true, find: true, …}[[Prototype]]: Object

const myCovertArr = Array.from(tempClass)
undefined

myCovertArr
[]length: 0[[Prototype]]: Array(0)

myCovertArr.forEach(function(li){
    li.style.color="blue"
})